generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique
  password             String
  name                 String
  indice               String                @unique
  grade                String
  signature            String
  type                 UserType              @default(OPERATION)
  role                 Role                  @default(STAFF)
  isActive             Boolean               @default(true)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  timeEntries          TimeEntry[]
  validatedTimeEntries TimeEntry[]           @relation("TimeEntryValidator")
  timeEntryValidations TimeEntryValidation[]
  proformaCosts        UserProformaCost[]
  projects             UserProject[]
  signedTimesheets     SignedTimesheet[]
}

model Project {
  id            Int           @id @default(autoincrement())
  name          String
  projectNumber String        @unique
  projectType   String
  staffAccess   staffAccess   @default(ALL)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  timeEntries   TimeEntry[]
  users         UserProject[]
}

model UserProject {
  userId               Int
  projectId            Int
  assignedAt           DateTime @default(now())
  updatedAt            DateTime @updatedAt
  allocationPercentage Float
  project              Project  @relation(fields: [projectId], references: [id])
  user                 User     @relation(fields: [userId], references: [id])

  @@id([userId, projectId])
  @@index([projectId], map: "UserProject_projectId_fkey")
}

model Activity {
  id            Int         @id @default(autoincrement())
  name          String
  parentId      Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  parent        Activity?   @relation("SubActivities", fields: [parentId], references: [id])
  subActivities Activity[]  @relation("SubActivities")
  timeEntries   TimeEntry[]

  @@index([parentId], map: "Activity_parentId_fkey")
}

model TimePeriod {
  id          Int         @id @default(autoincrement())
  year        Int
  semester    Semester
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  timeEntries TimeEntry[]

  @@unique([year, semester])
}

model TimeEntry {
  id                Int                   @id @default(autoincrement())
  userId            Int
  projectId         Int
  activityId        Int
  timePeriodId      Int
  semester          Semester
  year              Int
  hours             Float
  status            ValidationStatus      @default(PENDING)
  comment           String?
  validatedAt       DateTime?
  validatedBy       Int?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  activity          Activity              @relation(fields: [activityId], references: [id])
  project           Project               @relation(fields: [projectId], references: [id])
  timePeriod        TimePeriod            @relation(fields: [timePeriodId], references: [id])
  user              User                  @relation(fields: [userId], references: [id])
  validator         User?                 @relation("TimeEntryValidator", fields: [validatedBy], references: [id])
  validationHistory TimeEntryValidation[]

  @@index([userId])
  @@index([projectId])
  @@index([activityId])
  @@index([timePeriodId])
  @@index([validatedBy])
}

model TimeEntryValidation {
  id          Int              @id @default(autoincrement())
  timeEntryId Int
  status      ValidationStatus
  comment     String?
  validatedBy Int
  createdAt   DateTime         @default(now())
  timeEntry   TimeEntry        @relation(fields: [timeEntryId], references: [id])
  validator   User             @relation(fields: [validatedBy], references: [id])

  @@index([timeEntryId])
  @@index([validatedBy])
}

model UserProformaCost {
  id        Int      @id @default(autoincrement())
  userId    Int
  year      Int
  cost      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, year])
  @@index([userId])
}

model SignedTimesheet {
  id                Int      @id @default(autoincrement())
  userId            Int
  year              Int
  semester          Semester
  originalPdfPath   String   // Chemin vers le PDF original
  signedPdfData     Bytes?   // PDF signé stocké en base (BLOB) - Optionnel au début
  signatureDate     DateTime? // Date de signature - Optionnel au début
  signatureStatus   SignatureStatus @default(PENDING)
  signatureToken    String   @unique // Token unique pour la signature
  expiresAt         DateTime // Expiration du token de signature
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, year, semester])
  @@index([userId])
  @@index([signatureToken])
}

enum SignatureStatus {
  PENDING
  SIGNED
  EXPIRED
  CANCELLED
}

enum Role {
  ADMIN
  PMSU
  MANAGEMENT
  STAFF
}

enum UserType {
  OPERATION
  PROGRAMME
  SUPPORT
}

enum staffAccess {
  ALL
  OPERATION
  PROGRAMME
  SUPPORT
  MANAGEMENT
}

enum Semester {
  S1
  S2
}

enum ValidationStatus {
  PENDING
  APPROVED
  REJECTED
  REVISED
}
