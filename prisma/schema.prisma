// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  name         String
  indice       String        @unique
  grade        String
  signature    String
  type         UserType      @default(OPERATION)
  role         Role          @default(STAFF)
  isActive     Boolean       @default(true)  // Nouveau champ
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  projects     UserProject[]
  timeEntries  TimeEntry[]
  proformaCosts UserProformaCost[] // Nouvelle relation
  validatedTimeEntries TimeEntry[] @relation("TimeEntryValidator")
  timeEntryValidations TimeEntryValidation[]
}

model Project {
  id            Int           @id @default(autoincrement())
  name          String
  projectNumber String        @unique
  projectType   String
  staffAccess   staffAccess   @default(ALL)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  users         UserProject[]
  timeEntries   TimeEntry[]
}

model UserProject {
  userId               Int
  projectId            Int
  assignedAt           DateTime @default(now())
  updatedAt            DateTime @updatedAt
  allocationPercentage Float    // Pourcentage d'allocation sur le projet
  user                User     @relation(fields: [userId], references: [id])
  project             Project  @relation(fields: [projectId], references: [id])

  @@id([userId, projectId])
}

model Activity {
  id            Int         @id @default(autoincrement())
  name          String // Nom de l’activité
  parentId      Int? // Activité parente (optionnel pour sous-activités)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  parent        Activity?   @relation("SubActivities", fields: [parentId], references: [id])
  subActivities Activity[]  @relation("SubActivities") // Sous-activités
  timeEntries   TimeEntry[]
}

model TimeEntry {
  id         Int            @id @default(autoincrement())
  userId     Int
  projectId  Int
  activityId Int
  semester   Semester
  year       Int
  hours      Float
  status     ValidationStatus @default(PENDING)
  comment    String?
  validatedAt DateTime?
  validatedBy Int?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  user       User           @relation(fields: [userId], references: [id])
  project    Project        @relation(fields: [projectId], references: [id])
  activity   Activity       @relation(fields: [activityId], references: [id])
  validator  User?          @relation("TimeEntryValidator", fields: [validatedBy], references: [id])
  validationHistory TimeEntryValidation[]

  @@index([userId])
  @@index([projectId])
  @@index([activityId])
  @@index([validatedBy])
}

model TimeEntryValidation {
  id          Int             @id @default(autoincrement())
  timeEntryId Int
  status      ValidationStatus
  comment     String?
  validatedBy Int
  createdAt   DateTime        @default(now())
  timeEntry   TimeEntry       @relation(fields: [timeEntryId], references: [id])
  validator   User            @relation(fields: [validatedBy], references: [id])

  @@index([timeEntryId])
  @@index([validatedBy])
}

// Nouveau modèle pour gérer l'historique des coûts proforma
model UserProformaCost {
  id        Int      @id @default(autoincrement())
  userId    Int
  year      Int
  cost      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, year])
  @@index([userId])
}

enum Role {
  ADMIN
  PMSU
  MANAGEMENT
  STAFF
}

enum UserType {
  OPERATION
  PROGRAMME
  SUPPORT
}

enum staffAccess {
  ALL
  OPERATION
  PROGRAMME
  SUPPORT
  MANAGEMENT
}

enum Semester {
  S1
  S2
}

enum ValidationStatus {
  PENDING
  APPROVED
  REJECTED
  REVISED
}


