#!/usr/bin/env node

/**
 * Script de diagnostic des PDFs sign√©s stock√©s en base de donn√©es
 * V√©rifie l'int√©grit√© des donn√©es et identifie les probl√®mes
 */

console.log('üîç Diagnostic des PDFs sign√©s en base de donn√©es\n');

// Simulation des donn√©es de base pour diagnostic
function simulateDatabaseData() {
  console.log('üìä Simulation des donn√©es de base...\n');

  // Cas 1: PDF valide
  const validPdf = {
    id: 1,
    signedPdfData: Buffer.from('%PDF-1.4\n1 0 obj\n<<\n/Type /Catalog\n/Pages 2 0 R\n>>\nendobj\n%%EOF', 'utf8'),
    signatureStatus: 'SIGNED',
    user: { name: 'John Doe' }
  };

  // Cas 2: PDF vide ou null
  const emptyPdf = {
    id: 2,
    signedPdfData: null,
    signatureStatus: 'SIGNED',
    user: { name: 'Jane Smith' }
  };

  // Cas 3: PDF corrompu (pas de signature %PDF)
  const corruptedPdf = {
    id: 3,
    signedPdfData: Buffer.from('INVALID_PDF_CONTENT', 'utf8'),
    signatureStatus: 'SIGNED',
    user: { name: 'Bob Johnson' }
  };

  // Cas 4: PDF avec donn√©es vides
  const zeroLengthPdf = {
    id: 4,
    signedPdfData: Buffer.alloc(0),
    signatureStatus: 'SIGNED',
    user: { name: 'Alice Brown' }
  };

  return [validPdf, emptyPdf, corruptedPdf, zeroLengthPdf];
}

// Fonction de diagnostic d'un PDF
function diagnosePdf(pdfData, id) {
  console.log(`üîç Diagnostic du PDF ID ${id} (${pdfData.user.name}):`);
  
  // V√©rifier si les donn√©es existent
  if (!pdfData.signedPdfData) {
    console.log(`  ‚ùå PROBL√àME: signedPdfData est NULL ou undefined`);
    console.log(`  üí° Solution: V√©rifier le processus de stockage des signatures`);
    return false;
  }

  // V√©rifier le type de donn√©es
  console.log(`  üìã Type de donn√©es: ${typeof pdfData.signedPdfData}`);
  
  if (Buffer.isBuffer(pdfData.signedPdfData)) {
    console.log(`  ‚úÖ Format: Buffer valide`);
  } else if (pdfData.signedPdfData instanceof Uint8Array) {
    console.log(`  ‚úÖ Format: Uint8Array valide`);
  } else {
    console.log(`  ‚ùå PROBL√àME: Format de donn√©es invalide`);
    console.log(`  üí° Solution: Convertir en Buffer avant stockage`);
    return false;
  }

  // V√©rifier la taille
  const dataLength = pdfData.signedPdfData.length;
  console.log(`  üìè Taille des donn√©es: ${dataLength} bytes`);
  
  if (dataLength === 0) {
    console.log(`  ‚ùå PROBL√àME: Donn√©es vides (0 bytes)`);
    console.log(`  üí° Solution: V√©rifier le processus de stockage`);
    return false;
  }

  if (dataLength < 100) {
    console.log(`  ‚ö†Ô∏è  ATTENTION: PDF tr√®s petit (${dataLength} bytes) - possiblement corrompu`);
  }

  // V√©rifier la signature PDF
  if (dataLength >= 4) {
    const signature = pdfData.signedPdfData.slice(0, 4).toString();
    console.log(`  üéØ Signature PDF: "${signature}"`);
    
    if (signature === '%PDF') {
      console.log(`  ‚úÖ Signature PDF valide`);
    } else {
      console.log(`  ‚ùå PROBL√àME: Signature PDF invalide - attendu "%PDF", re√ßu "${signature}"`);
      console.log(`  üí° Solution: V√©rifier l'int√©grit√© lors du stockage`);
      return false;
    }
  } else {
    console.log(`  ‚ùå PROBL√àME: Donn√©es trop courtes pour v√©rifier la signature`);
    return false;
  }

  // V√©rifier la fin du PDF
  if (dataLength >= 6) {
    const end = pdfData.signedPdfData.slice(-6).toString();
    console.log(`  üèÅ Fin du PDF: "${end}"`);
    
    if (end.includes('%%EOF')) {
      console.log(`  ‚úÖ Fin de PDF valide`);
    } else {
      console.log(`  ‚ö†Ô∏è  ATTENTION: Fin de PDF suspecte`);
    }
  }

  console.log(`  ‚úÖ PDF ID ${id} semble valide\n`);
  return true;
}

// Fonction de test de conversion
function testConversion(pdfData, id) {
  console.log(`üîÑ Test de conversion pour le PDF ID ${id}:`);
  
  try {
    let pdfBuffer;
    
    if (Buffer.isBuffer(pdfData.signedPdfData)) {
      pdfBuffer = pdfData.signedPdfData;
      console.log(`  ‚úÖ Donn√©es d√©j√† en Buffer`);
    } else if (pdfData.signedPdfData instanceof Uint8Array) {
      pdfBuffer = Buffer.from(pdfData.signedPdfData);
      console.log(`  ‚úÖ Conversion Uint8Array ‚Üí Buffer r√©ussie`);
    } else {
      pdfBuffer = Buffer.from(pdfData.signedPdfData);
      console.log(`  ‚úÖ Conversion en Buffer r√©ussie`);
    }

    // V√©rifier que le buffer est valide
    if (!pdfBuffer || pdfBuffer.length === 0) {
      console.log(`  ‚ùå PROBL√àME: Buffer invalide apr√®s conversion`);
      return false;
    }

    // V√©rifier la signature apr√®s conversion
    const signature = pdfBuffer.slice(0, 4).toString();
    if (signature === '%PDF') {
      console.log(`  ‚úÖ Signature PDF maintenue apr√®s conversion`);
    } else {
      console.log(`  ‚ùå PROBL√àME: Signature PDF perdue apr√®s conversion`);
      return false;
    }

    console.log(`  ‚úÖ Conversion r√©ussie pour le PDF ID ${id}\n`);
    return true;

  } catch (error) {
    console.log(`  ‚ùå ERREUR lors de la conversion: ${error.message}`);
    return false;
  }
}

// Fonction de simulation de t√©l√©chargement
function simulateDownload(pdfData, id) {
  console.log(`üì• Simulation de t√©l√©chargement pour le PDF ID ${id}:`);
  
  try {
    // V√©rifier que les donn√©es existent
    if (!pdfData.signedPdfData) {
      console.log(`  ‚ùå Impossible de t√©l√©charger: donn√©es manquantes`);
      return false;
    }

    // Convertir en Buffer si n√©cessaire
    let pdfBuffer;
    if (Buffer.isBuffer(pdfData.signedPdfData)) {
      pdfBuffer = pdfData.signedPdfData;
    } else {
      pdfBuffer = Buffer.from(pdfData.signedPdfData);
    }

    // V√©rifier la validit√© du buffer
    if (!pdfBuffer || pdfBuffer.length === 0) {
      console.log(`  ‚ùå Impossible de t√©l√©charger: buffer invalide`);
      return false;
    }

    // V√©rifier la signature
    const signature = pdfBuffer.slice(0, 4).toString();
    if (signature !== '%PDF') {
      console.log(`  ‚ùå Impossible de t√©l√©charger: signature PDF invalide`);
      return false;
    }

    // Simuler la cr√©ation des headers HTTP
    const headers = {
      'Content-Type': 'application/pdf',
      'Content-Disposition': `attachment; filename="test_${id}.pdf"`,
      'Content-Length': pdfBuffer.length.toString(),
      'Cache-Control': 'no-cache, no-store, must-revalidate'
    };

    console.log(`  ‚úÖ Headers HTTP cr√©√©s:`, headers);
    console.log(`  ‚úÖ T√©l√©chargement simul√© r√©ussi pour le PDF ID ${id}\n`);
    return true;

  } catch (error) {
    console.log(`  ‚ùå ERREUR lors du t√©l√©chargement simul√©: ${error.message}`);
    return false;
  }
}

// Fonction principale de diagnostic
function runDiagnosis() {
  console.log('üöÄ D√©marrage du diagnostic complet...\n');

  // Simuler les donn√©es de base
  const pdfs = simulateDatabaseData();
  
  let validPdfs = 0;
  let problematicPdfs = 0;

  // Diagnostiquer chaque PDF
  pdfs.forEach((pdf, index) => {
    const isValid = diagnosePdf(pdf, pdf.id);
    if (isValid) {
      validPdfs++;
      
      // Tester la conversion
      testConversion(pdf, pdf.id);
      
      // Simuler le t√©l√©chargement
      simulateDownload(pdf, pdf.id);
    } else {
      problematicPdfs++;
    }
    
    console.log('‚îÄ'.repeat(50));
  });

  // R√©sum√© du diagnostic
  console.log('üìã R√âSUM√â DU DIAGNOSTIC');
  console.log('========================');
  console.log(`‚úÖ PDFs valides: ${validPdfs}`);
  console.log(`‚ùå PDFs probl√©matiques: ${problematicPdfs}`);
  console.log(`üìä Total analys√©: ${pdfs.length}`);

  if (problematicPdfs === 0) {
    console.log('\nüéØ DIAGNOSTIC TERMIN√â');
    console.log('‚úÖ Tous les PDFs semblent valides');
    console.log('üîç Le probl√®me pourrait √™tre dans :');
    console.log('   - La r√©ponse HTTP du serveur');
    console.log('   - Les headers de t√©l√©chargement');
    console.log('   - La gestion c√¥t√© client');
  } else {
    console.log('\n‚ö†Ô∏è  PROBL√àMES D√âTECT√âS');
    console.log('V√©rifiez les erreurs ci-dessus');
    console.log('\nüîß SOLUTIONS RECOMMAND√âES:');
    console.log('1. V√©rifier le processus de stockage des signatures');
    console.log('2. S\'assurer que les PDFs sont correctement encod√©s');
    console.log('3. V√©rifier l\'int√©grit√© des donn√©es avant stockage');
    console.log('4. Ajouter des validations lors du stockage');
  }

  return problematicPdfs === 0;
}

// Ex√©cuter le diagnostic si le script est appel√© directement
if (require.main === module) {
  runDiagnosis();
}

module.exports = {
  diagnosePdf,
  testConversion,
  simulateDownload,
  runDiagnosis
};
