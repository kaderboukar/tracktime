const fetch = require('node-fetch');

async function testStaffTimesheetAPI() {
  const baseUrl = 'http://localhost:3000';
  
  console.log('üß™ Test de l\'API Staff Timesheet avec filtres de p√©riode\n');

  try {
    // Test 1: R√©cup√©rer toutes les p√©riodes disponibles
    console.log('1Ô∏è‚É£ Test de r√©cup√©ration des p√©riodes disponibles...');
    const periodsResponse = await fetch(`${baseUrl}/api/time-periods`);
    const periodsResult = await periodsResponse.json();
    
    if (periodsResult.success) {
      console.log('‚úÖ P√©riodes disponibles:', periodsResult.data);
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des p√©riodes:', periodsResult.message);
    }

    // Test 2: R√©cup√©rer les donn√©es staff-timesheet sans filtres
    console.log('\n2Ô∏è‚É£ Test de r√©cup√©ration des donn√©es staff-timesheet sans filtres...');
    const staffResponse = await fetch(`${baseUrl}/api/admin/staff-timesheet`);
    const staffResult = await staffResponse.json();
    
    if (staffResult.success) {
      console.log('‚úÖ Donn√©es staff-timesheet r√©cup√©r√©es:', staffResult.data.length, 'entr√©es');
      console.log('‚úÖ P√©riodes disponibles retourn√©es:', staffResult.availablePeriods?.length || 0);
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des donn√©es staff:', staffResult.message);
    }

    // Test 3: R√©cup√©rer les donn√©es staff-timesheet avec filtres de p√©riode
    if (periodsResult.success && periodsResult.data.length > 0) {
      const testPeriod = periodsResult.data[0];
      console.log(`\n3Ô∏è‚É£ Test de r√©cup√©ration des donn√©es staff-timesheet pour ${testPeriod.semester} ${testPeriod.year}...`);
      
      const filteredResponse = await fetch(`${baseUrl}/api/admin/staff-timesheet?year=${testPeriod.year}&semester=${testPeriod.semester}`);
      const filteredResult = await filteredResponse.json();
      
      if (filteredResult.success) {
        console.log('‚úÖ Donn√©es filtr√©es r√©cup√©r√©es:', filteredResult.data.length, 'entr√©es');
        console.log('‚úÖ P√©riodes disponibles retourn√©es:', filteredResult.availablePeriods?.length || 0);
      } else {
        console.log('‚ùå Erreur lors de la r√©cup√©ration des donn√©es filtr√©es:', filteredResult.message);
      }
    }

    // Test 4: Test avec une p√©riode inexistante
    console.log('\n4Ô∏è‚É£ Test avec une p√©riode inexistante (2020 S1)...');
    const invalidResponse = await fetch(`${baseUrl}/api/admin/staff-timesheet?year=2020&semester=S1`);
    const invalidResult = await invalidResponse.json();
    
    if (!invalidResult.success) {
      console.log('‚úÖ Erreur attendue pour p√©riode inexistante:', invalidResult.message);
    } else {
      console.log('‚ö†Ô∏è  P√©riode inexistante retourne des donn√©es (inattendu)');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
  }
}

// Ex√©cuter les tests
testStaffTimesheetAPI();

