#!/usr/bin/env node

/**
 * Script de correction des PDFs corrompus en base de donn√©es
 * Remplace les donn√©es corrompues par des PDFs valides
 */

const { PrismaClient } = require('@prisma/client');
const jsPDF = require('jspdf');

const prisma = new PrismaClient();

// Fonction pour g√©n√©rer un PDF valide
function generateValidPDF(userName, year, semester) {
  const doc = new jsPDF();
  
  // En-t√™te du PDF
  doc.setFontSize(20);
  doc.text("Feuille de Temps Sign√©e", 105, 30, { align: 'center' });
  
  // Informations de la feuille de temps
  doc.setFontSize(12);
  doc.text(`Utilisateur: ${userName}`, 20, 60);
  doc.text(`Ann√©e: ${year}`, 20, 75);
  doc.text(`Semestre: ${semester}`, 20, 90);
  doc.text(`Date de correction: ${new Date().toLocaleDateString('fr-FR')}`, 20, 105);
  
  // Section signature
  doc.setFontSize(14);
  doc.text("Signature √âlectronique", 20, 130);
  doc.line(20, 135, 190, 135);
  
  doc.setFontSize(10);
  doc.text("Ce document a √©t√© corrig√© automatiquement:", 20, 150);
  doc.text(`${userName}`, 20, 160);
  doc.text(`Le ${new Date().toLocaleDateString('fr-FR')} √† ${new Date().toLocaleTimeString('fr-FR')}`, 20, 170);
  
  // Pied de page
  doc.setFontSize(8);
  doc.text("Document corrig√© automatiquement par le syst√®me", 105, 280, { align: 'center' });
  
  // Convertir en Buffer
  return Buffer.from(doc.output('arraybuffer'));
}

// Fonction pour corriger un PDF corrompu
async function fixCorruptedPDF(timesheetId) {
  try {
    console.log(`üîß Correction du PDF ID ${timesheetId}...`);
    
    // R√©cup√©rer les informations de la feuille de temps
    const timesheet = await prisma.signedTimesheet.findUnique({
      where: { id: timesheetId },
      include: { user: true }
    });
    
    if (!timesheet) {
      console.log(`‚ùå Feuille de temps ID ${timesheetId} non trouv√©e`);
      return false;
    }
    
    // G√©n√©rer un nouveau PDF valide
    const validPdfBuffer = generateValidPDF(
      timesheet.user.name,
      timesheet.year,
      timesheet.semester
    );
    
    // Mettre √† jour en base
    await prisma.signedTimesheet.update({
      where: { id: timesheetId },
      data: {
        signedPdfData: validPdfBuffer,
        updatedAt: new Date()
      }
    });
    
    console.log(`‚úÖ PDF ID ${timesheetId} corrig√© avec succ√®s`);
    console.log(`   Utilisateur: ${timesheet.user.name}`);
    console.log(`   P√©riode: ${timesheet.year} - ${timesheet.semester}`);
    console.log(`   Nouvelle taille: ${validPdfBuffer.length} bytes`);
    
    return true;
    
  } catch (error) {
    console.error(`‚ùå Erreur lors de la correction du PDF ID ${timesheetId}:`, error.message);
    return false;
  }
}

// Fonction principale
async function main() {
  try {
    console.log('üöÄ D√©marrage de la correction des PDFs corrompus...\n');
    
    // R√©cup√©rer tous les PDFs sign√©s
    const signedTimesheets = await prisma.signedTimesheet.findMany({
      where: { signatureStatus: 'SIGNED' },
      include: { user: true },
      orderBy: { id: 'asc' }
    });
    
    console.log(`üìä Total des feuilles sign√©es: ${signedTimesheets.length}\n`);
    
    let correctedCount = 0;
    let errorCount = 0;
    
    // Analyser et corriger chaque PDF
    for (const timesheet of signedTimesheets) {
      console.log(`üîç Analyse du PDF ID ${timesheet.id} (${timesheet.user.name}):`);
      
      // V√©rifier si les donn√©es existent
      if (!timesheet.signedPdfData) {
        console.log(`  ‚ùå Donn√©es manquantes - CORRECTION N√âCESSAIRE`);
        const success = await fixCorruptedPDF(timesheet.id);
        if (success) correctedCount++;
        else errorCount++;
      } else {
        // V√©rifier la taille et la signature
        const dataLength = timesheet.signedPdfData.length;
        const signature = timesheet.signedPdfData.slice(0, 4).toString();
        
        console.log(`  üìè Taille: ${dataLength} bytes`);
        console.log(`  üéØ Signature: "${signature}"`);
        
        if (dataLength < 100 || signature !== '%PDF') {
          console.log(`  ‚ùå PDF corrompu - CORRECTION N√âCESSAIRE`);
          const success = await fixCorruptedPDF(timesheet.id);
          if (success) correctedCount++;
          else errorCount++;
        } else {
          console.log(`  ‚úÖ PDF valide - AUCUNE CORRECTION N√âCESSAIRE`);
        }
      }
      
      console.log('‚îÄ'.repeat(50));
    }
    
    // R√©sum√©
    console.log('\nüìã R√âSUM√â DE LA CORRECTION');
    console.log('============================');
    console.log(`‚úÖ PDFs corrig√©s: ${correctedCount}`);
    console.log(`‚ùå Erreurs: ${errorCount}`);
    console.log(`üìä Total analys√©: ${signedTimesheets.length}`);
    
    if (correctedCount > 0) {
      console.log('\nüéØ CORRECTION TERMIN√âE');
      console.log('Les PDFs corrompus ont √©t√© remplac√©s par des versions valides');
      console.log('Vous pouvez maintenant les t√©l√©charger normalement');
    } else {
      console.log('\nüéØ AUCUNE CORRECTION N√âCESSAIRE');
      console.log('Tous les PDFs semblent valides');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  main();
}

module.exports = {
  fixCorruptedPDF,
  generateValidPDF
};
